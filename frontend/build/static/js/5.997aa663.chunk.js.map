{"version":3,"sources":["actions/generatorActions.js","actions/smirnovActions.js","actions/frequencyActions.js","api/index.js","reducers/generatorReducers.js","reducers/smirnovReducers.js","reducers/frequencyReducers.js","constants/generatorConstants.js","constants/smirnovConstants.js","constants/frequencyConstants.js","views/GeneratorView.js"],"names":["generatorActions","UPDATE_VALUE","SUBMIT_FORM","SUCCESS_GENERATOR","REQUEST_GENERATOR","RESET_GENERATOR","FAIL_GENERATOR","SET_DEFAULT_GENERATOR","SAVE_PSEUDO_NUMBERS","smirnovActions","SUCCESS_SMIRNOV","REQUEST_SMIRNOV","RESET_SMIRNOV","FAIL_SMIRNOV","SET_MODAL","frequencyActions","SUCCESS_FREQUENCY","REQUEST_FREQUENCY","RESET_FREQUENCY","FAIL_FREQUENCY","callApi","url","method","body","constants","dispatch","a","REQUEST","SUCCESS","FAIL","type","axios","data","headers","payload","message","generatorReducers","state","action","actions","key","value","loading","error","response","pseudoNumbers","x0","c","m","localStorage","removeItem","setItem","JSON","stringify","smirnovReducers","max","about","showModal","show","frequencyReducers","console","log","generatorInitialState","success","undefined","smirnovInitialState","percent","numberGroups","frequencyInitialState","alpha","GeneratorView","useReducer","reducer","initialState","refPseudoNumbers","React","createRef","refEnd","history","useHistory","scrollTo","ref","current","scrollIntoView","behavior","block","handleChange","event","target","name","changePage","push","className","onClick","onSubmit","preventDefault","toast","promise","e","onChange","style","marginTop","sm","striped","hover","responsive","map","item","index","n","rn","xn","xn1","length"],"mappings":"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","file":"static/js/5.997aa663.chunk.js","sourcesContent":["export const generatorActions = {\n  UPDATE_VALUE: \"UPDATE_VALUE\",\n  SUBMIT_FORM: \"SUBMIT_FORM\",\n  SUCCESS_GENERATOR: \"SUCCESS_GENERATOR\",\n  REQUEST_GENERATOR: \"REQUEST_GENERATOR\",\n  RESET_GENERATOR: \"RESET_GENERATOR\",\n  FAIL_GENERATOR: \"FAIL_GENERATOR\",\n  SET_DEFAULT_GENERATOR: \"SET_DEFAULT_GENERATOR\",\n  SAVE_PSEUDO_NUMBERS: \"SAVE_PSEUDO_NUMBERS\"\n};\n","export const smirnovActions = {\n  UPDATE_VALUE: \"UPDATE_VALUE\",\n  SUBMIT_FORM: \"SUBMIT_FORM\",\n  SUCCESS_SMIRNOV: \"SUCCESS_SMIRNOV\",\n  REQUEST_SMIRNOV: \"REQUEST_SMIRNOV\",\n  RESET_SMIRNOV: \"RESET_SMIRNOV\",\n  FAIL_SMIRNOV: \"FAIL_SMIRNOV\",\n  SET_MODAL: \"SET_MODAL\",\n\n};\n","export const frequencyActions = {\n    UPDATE_VALUE: \"UPDATE_VALUE\",\n    SUBMIT_FORM: \"SUBMIT_FORM\",\n    SUCCESS_FREQUENCY: \"SUCCESS_FREQUENCY\",\n    REQUEST_FREQUENCY: \"REQUEST_FREQUENCY\",\n    RESET_FREQUENCY: \"RESET_FREQUENCY\",\n    FAIL_FREQUENCY: \"FAIL_FREQUENCY\",\n    SET_MODAL: \"SET_MODAL\",\n  \n  };\n  ","import axios from \"axios\";\n\nexport async function callApi(url, method, body, constants, dispatch) {\n  const { REQUEST, SUCCESS, FAIL } = constants;\n  try {\n    dispatch({ type: REQUEST });\n    const { data } = await axios({\n      method,\n      url: url,\n      data: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    dispatch({ type: SUCCESS, payload: data});\n  } catch (error) {\n    dispatch({\n      type: FAIL,\n      payload: error.message,\n    });\n    throw \"Ingresa parametros correctos\"\n  }\n}\n","import { generatorActions as actions } from \"../actions\";\nexport const generatorReducers = (state = {}, action) => {\n  switch (action.type) {\n    case actions.UPDATE_VALUE:\n      return {\n        ...state,\n        [action.payload.key]: action.payload.value,\n      };\n    case actions.FAIL_GENERATOR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    case actions.SUCCESS_GENERATOR:\n      return {\n        ...state,\n        loading: false,\n        response: action.payload.response,\n        pseudoNumbers: action.payload.pseudoNumbers,\n      };\n    case actions.REQUEST_GENERATOR:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.SET_DEFAULT_GENERATOR:\n      return {\n        ...state,\n        x0: 17,\n        a: 101,\n        c: 221,\n        m: 17001,\n      };\n    case actions.SAVE_PSEUDO_NUMBERS:\n      if (state.response) {\n        localStorage.removeItem(\"pseudo-numbers\");\n        localStorage.removeItem(\"pseudo-numbers-modal\");\n        localStorage.setItem(\n          \"pseudo-numbers\",\n          JSON.stringify(state.pseudoNumbers)\n        );\n        localStorage.setItem(\n          \"pseudo-numbers-modal\",\n          JSON.stringify(state.response)\n        );\n      }\n      return state;\n  }\n};\n","import { smirnovActions as actions } from \"../actions\";\nexport const smirnovReducers = (state = {}, action) => {\n  switch (action.type) {\n    case actions.UPDATE_VALUE:\n      return {\n        ...state,\n        [action.payload.key]: action.payload.value,\n      };\n    case actions.FAIL_SMIRNOV:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    case actions.SUCCESS_SMIRNOV:\n      return {\n        ...state,\n        loading: false,\n        response: {\n          max: action.payload[\"max\"],\n          message: action.payload[\"message\"],\n          about: action.payload[\"about\"],\n        },\n      };\n    case actions.REQUEST_SMIRNOV:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.SET_MODAL:\n      return {\n        ...state,\n        showModal: action.show,\n      };\n  }\n};\n","import { frequencyActions as actions } from \"../actions\";\nexport const frequencyReducers = (state = {}, action) => {\n  switch (action.type) {\n    case actions.UPDATE_VALUE:\n      return {\n        ...state,\n        [action.payload.key]: action.payload.value,\n      };\n    case actions.FAIL_FREQUENCY:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    case actions.SUCCESS_FREQUENCY:\n      console.log(action.payload);\n      return {\n        ...state,\n        loading: false,\n        response: action.payload,\n      };\n    case actions.REQUEST_FREQUENCY:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.SET_MODAL:\n      return {\n        ...state,\n        showModal: action.show,\n      };\n  }\n};\n","export const generatorInitialState = {\n  x0: 0,\n  a: 0,\n  c: 0,\n  m: 0,\n  loading: false,\n  error: false,\n  success: false,\n  message: \"\",\n  response: undefined,\n  pseudoNumbers: undefined,\n};\n","export const smirnovInitialState = {\n    percent: 0,\n    numberGroups: 0,\n    loading: false,\n    error: false,\n    success: false,\n    message: \"\",\n    response: undefined,\n    showModal: false,\n \n  };\n  ","export const frequencyInitialState = {\n  alpha: 0,\n  numberGroups: 0,\n  loading: false,\n  error: false,\n  success: false,\n  message: \"\",\n  response: undefined,\n\n  showModal: false,\n};\n","import React, { useReducer } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  FormLabel,\n  FormControl,\n  Table,\n} from \"react-bootstrap\";\nimport { PrimaryButton, SecondaryButton } from \"../components\";\n\nimport { generatorReducers as reducer } from \"../reducers\";\nimport { generatorInitialState as initialState } from \"../constants\";\nimport { generatorActions as actions } from \"../actions\";\n\nimport { callApi } from \"../api\";\nimport { LoaderDots } from \"../components\";\nimport { ButtonsContainer, ContainerStyled } from \"../utils\";\nimport { ToastAlert } from \"../components\";\nimport toast from \"react-hot-toast\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function GeneratorView() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const refPseudoNumbers = React.createRef(null);\n  const refEnd = React.createRef(null);\n  const history = useHistory();\n\n  const scrollTo = (ref) => {\n    if (ref) {\n      ref.current.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  };\n  const handleChange = (event) => {\n    const { value, name } = event.target;\n    dispatch({\n      type: actions.UPDATE_VALUE,\n      payload: {\n        key: name,\n        value,\n      },\n    });\n  };\n  const changePage = (url) => {\n    history.push(url);\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    toast.promise(\n      callApi(\n        \"/api/generator/generator/\",\n        \"POST\",\n        {\n          x0: state.x0,\n          a: state.a,\n          c: state.c,\n          m: state.m,\n        },\n        {\n          SUCCESS: actions.SUCCESS_GENERATOR,\n          FAIL: actions.FAIL_GENERATOR,\n          REQUEST: actions.REQUEST_GENERATOR,\n        },\n        dispatch\n      ),\n      {\n        loading: \"Generando números pseudoaleatorios\",\n        success: \"Números pseudoaleatorios generados correctamente\",\n        error: (e) => `${e}`,\n      }\n    );\n  };\n\n  return (\n    <ContainerStyled>\n      <ToastAlert />\n      <h1>Generador de números pseudoaleatorios &#9997;</h1>\n      <div className=\"usecondary-button-box\">\n        <SecondaryButton\n          onClick={() =>\n            dispatch({\n              type: actions.SET_DEFAULT_GENERATOR,\n            })\n          }\n        >\n          Usar números por default\n        </SecondaryButton>\n      </div>\n      {state && (\n        <>\n          <Form onSubmit={handleSubmit}>\n            <FormGroup>\n              <FormLabel>\n                Valor de <b>X0</b>\n              </FormLabel>\n              <FormControl\n                type=\"number\"\n                name=\"x0\"\n                value={state.x0}\n                onChange={handleChange}\n              />\n            </FormGroup>\n            <FormGroup>\n              <FormLabel>\n                Valor de <b>a</b>\n              </FormLabel>\n              <FormControl\n                type=\"number\"\n                name=\"a\"\n                value={state.a}\n                onChange={handleChange}\n              />\n            </FormGroup>\n            <FormGroup>\n              <FormLabel>\n                Valor de <b>c</b>\n              </FormLabel>\n              <FormControl\n                type=\"number\"\n                name=\"c\"\n                value={state.c}\n                onChange={handleChange}\n              />\n            </FormGroup>\n            <FormGroup>\n              <FormLabel>\n                Valor de <b>m</b>\n              </FormLabel>\n              <FormControl\n                type=\"number\"\n                name=\"m\"\n                value={state.m}\n                onChange={handleChange}\n              />\n            </FormGroup>\n            {state.loading ? (\n              <LoaderDots />\n            ) : (\n              <PrimaryButton\n                type=\"submit\"\n                onClick={() => scrollTo(refPseudoNumbers)}\n              >\n                Generar\n              </PrimaryButton>\n            )}\n          </Form>\n          <h2 ref={refPseudoNumbers} style={{ marginTop: \"1rem\" }}>\n            {state.response ? \"Resultados\" : \"\"}\n          </h2>\n          {state.response && (\n            <>\n              <ButtonsContainer className=\"mt-4\">\n                <Col sm={3}>\n                  <SecondaryButton onClick={() => scrollTo(refEnd)}>\n                    Ir al final de la tabla\n                  </SecondaryButton>\n                </Col>\n                <Col sm={3}>\n                  <SecondaryButton\n                    onClick={() => {\n                      dispatch({\n                        type: actions.SAVE_PSEUDO_NUMBERS,\n                      });\n                      toast.success(\"Números guardados correctamente\");\n                    }}\n                  >\n                    Guardar estos números &#x2705;\n                  </SecondaryButton>\n                </Col>\n                <Col sm={3}>\n                  <SecondaryButton\n                    onClick={() => {\n                      changePage(\"/exercises/tests/smirnov\");\n                      dispatch({\n                        type: actions.SAVE_PSEUDO_NUMBERS,\n                      });\n                    }}\n                  >\n                    Realizar prueba Smirnov\n                  </SecondaryButton>\n                </Col>\n                <Col sm={3}>\n                  <SecondaryButton\n                    onClick={() => {\n                      changePage(\"/exercises/tests/frequency\");\n                      dispatch({\n                        type: actions.SAVE_PSEUDO_NUMBERS,\n                      });\n                    }}\n                  >\n                    Realizar prueba frecuencia\n                  </SecondaryButton>\n                </Col>\n              </ButtonsContainer>\n\n              <Table\n                striped\n                hover\n                responsive\n                className=\"table-sm mt-4\"\n              >\n                <thead>\n                  <tr>\n                    <th>n</th>\n                    <th>Rn</th>\n                    <th>Xn</th>\n                    <th>Xn+1</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {state.response.map((item, index) => (\n                    <tr key={index}>\n                      <td>{item.n}</td>\n                      <td>{item.rn}</td>\n                      <td>{item.xn}</td>\n                      <td>{item.xn1}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n              <span className=\"mb-4\">\n                Genial! Generaste {state.response.length} números &#128079;\n              </span>\n              <SecondaryButton\n                className=\"mb-4\"\n                ref={refEnd}\n                onClick={() => scrollTo(refPseudoNumbers)}\n              >\n                Regresar al principio\n              </SecondaryButton>\n            </>\n          )}\n        </>\n      )}\n    </ContainerStyled>\n  );\n}\n"],"sourceRoot":""}